// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"
)

// KafkaConnector is an autogenerated mock type for the KafkaConnector type
type KafkaConnector struct {
	mock.Mock
}

// GetConsumerConfigMap provides a mock function with given fields:
func (_m *KafkaConnector) GetConsumerConfigMap() *kafka.ConfigMap {
	ret := _m.Called()

	var r0 *kafka.ConfigMap
	if rf, ok := ret.Get(0).(func() *kafka.ConfigMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.ConfigMap)
		}
	}

	return r0
}

// GetMaxErrorsExitCount provides a mock function with given fields:
func (_m *KafkaConnector) GetMaxErrorsExitCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetPollTimeoutMs provides a mock function with given fields:
func (_m *KafkaConnector) GetPollTimeoutMs() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SetLogger provides a mock function with given fields: logger
func (_m *KafkaConnector) SetLogger(logger logrus.FieldLogger) {
	_m.Called(logger)
}

// NewKafkaConnector creates a new instance of KafkaConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaConnector {
	mock := &KafkaConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
