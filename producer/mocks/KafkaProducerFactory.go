// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	adapter "github.com/AeroAgency/go-kafka/adapters"
	kafka "github.com/confluentinc/confluent-kafka-go/kafka"

	mock "github.com/stretchr/testify/mock"
)

// KafkaProducerFactory is an autogenerated mock type for the KafkaProducerFactory type
type KafkaProducerFactory struct {
	mock.Mock
}

// NewProducer provides a mock function with given fields: configMap
func (_m *KafkaProducerFactory) NewProducer(configMap *kafka.ConfigMap) (adapter.Producer, error) {
	ret := _m.Called(configMap)

	var r0 adapter.Producer
	var r1 error
	if rf, ok := ret.Get(0).(func(*kafka.ConfigMap) (adapter.Producer, error)); ok {
		return rf(configMap)
	}
	if rf, ok := ret.Get(0).(func(*kafka.ConfigMap) adapter.Producer); ok {
		r0 = rf(configMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(adapter.Producer)
		}
	}

	if rf, ok := ret.Get(1).(func(*kafka.ConfigMap) error); ok {
		r1 = rf(configMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKafkaProducerFactory creates a new instance of KafkaProducerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaProducerFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaProducerFactory {
	mock := &KafkaProducerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
